環境変数

シェル自身と、そのシェルから起動されるすべてのプロセス（コマンドや別のシェル）で有効となる変数。
代表的な環境変数としては、コマンドを検索するディレクトリリストを格納するPATH、ユーザーのホームディレクトリのフルパスを表すHOME等がある。


シェル変数

そのシェル内でのみ有効となる変数。
シェル変数はexportコマンドでエクスポートすることによって環境変数となり、このシェルから起動したコマンドや他のシェルでも使えるようになる。


envコマンド、printenvコマンド

設定されている環境変数が表示される。


setコマンド

シェル変数と環境変数が表示される。
シェルには様々なオプション機能があり、setコマンドを使ってオンオフを切り替えられる。

set [-o] [+o] [オプション]

-oで有効、+oで無効。


エイリアス

bashではエイリアス機能を利用することで、コマンドに別名を付けたりコマンドとオプションをひとまとめにして新しいコマンドのようにしたり、一連のコマンドを簡単に呼び出したりできるようになる。
エイリアスの設定はaliasコマンドで行う。

alias ls='ls -l'

エイリアスを解除するには、unaliasコマンドを使う。

unalias ls

unaliasコマンドを-aオプション付きで実行すると、設定されているすべてのエイリアスが解除される。
一時的にエイリアスを使用しない場合は、実行するコマンドの前に「\」をつけるとその時だけエイリアス設定が無視される。

\ls


functionコマンド

bashの組み込みコマンドであるfunctionコマンドを使うと、bashシェル上で利用できる独自の関数を定義できる。

function lslink() { ls -l | grep '^l'; }

関数を実行するには、コマンドを実行するのと同じように関数名を入力する。
関数が利用できるのは、その関数を定義したシェル内のみとなる。
bashでは変数名と関数名を区別しないため、名前が重複しないように注意する。
定義されている関数のみを表示するには、declare -fコマンドを使う。

関数定義を削除するには、変数を削除する時と同様に、unsetコマンドを使う。


bashの設定ファイル

シェルを起動するたびに環境変数やエイリアス、関数などを定義するのは非効率。
そのため、それらの定義を自動的に行うための設定ファイルが用意されている。

/etc/profile ... ログイン時に実行され、全ユーザーから参照される
/etc/bash.bashrc ... bash起動時に実行され、全ユーザーから参照される
/etc/bashrc ... ~/.bashrcから参照される
~/.bash_profile ... ログイン時に実行される
~/.bash_login ... ~/.bash_profileが無い場合、ログイン時に実行される
~/.profile ... ~/.bash_profileも~/.bash_loginも無い場合、ログイン時に実行される
~/.bashrc ... bash起動時に実行される
~/.bash_logout ... ログアウト時に実行される


/etc/profileファイル

bashのログイン時に実行される。すべてのユーザーから参照されるため、基本的な環境変数などが設定される。


/etc/bash.bashrcファイル
bash起動時に実行され、すべてのユーザーから参照される。
ディストリビューションによってはこのファイルは存在しない。


~/.bash_profileファイル
ユーザー独自の設定を行う。
~/.bash_profileが存在しない場合は~/.bash_login、~/.profileの順にファイルが検索され、最初に見つかったものが読み込まれる。


~/.bashrcファイル

対話型シェルが起動されるたびに実行される。


~/.bash_logoutファイル

~/.bash_logoutがあれば、ログインシェルの終了時に~/.bash_logoutを読み込んで実行する。


シェルスクリプト

bashシェルをはじめ、シェルにはスクリプト言語によるプログラミング機能が備わっている。
シェルスクリプトを使うことにより、一連のコマンドライン作業を自動化できる。
シェルスクリプトは、テキストファイルにコマンドを記述するだけで作成できる。


スクリプトを実行する方法

・bash lsld
・source lsld
・. lsld


execコマンド

シェルスクリプトを実施しているシェルのプロセスが、指定したコマンドのプロセスに置き換わる。


実行結果の戻り値

コマンドを実行すると、終了時にシェルに対して戻り値を返す。
正常終了した場合は0、正常終了しなかった場合は0以外が返される。
戻り値は特殊な変数$?に格納される。


testコマンド

ファイルに関する情報を取得する。
ファイルが存在するかどうかなど。


if文

if 条件式
then
  実行文1
else
  実行分2
fi


case文

case 式 in
値1)
  実行文1 ;;
値2)
  実行文2 ;;
esac


for文

for 変数名 in 変数に代入する値のリスト
do
  実行文
done

seqコマンドを使うと、連続した数値を自動的に生成できるのでリストの生成に利用できる。


while文

while 条件文
do
  実行文
done


readコマンド
シェルスクリプト内で標準入力からの入力を受けつける際に利用できる。


ホストレベルのセキュリティ

セキュリティを高めるためには、次のような方法がある。

・外部からの侵入に対するセキュリティを高める
　必要なソフトウェアのみをインストールし、不要なサービスを起動しない
  ホストレベルの適切なアクセス制御を行う
  パケットフィルタリングによりアクセスを制限する
  セキュリティ情報の確認を頻繁に行い、必要があれば素早く対策を実施する

・内部からの侵入に対するセキュリティを高める
　適切なユーザーパスワード管理を行う
　スーパーユーザー(root)権限で動作するプログラムを最小限にし、定期的にチェックを行う


デーモン

常時メモリ上に待機していて、クライアントからの要求を監視している。
使用されていない状態のときも、メモリ等のリソースを消費している。


inted、xinetd

スーパーサーバと呼ばれ、他のサーバプログラムに代わってサービス要求を監視し、接続が確立した時点で本来のサーバプログラムに要求を引き渡す。
必要な時だけ個々のサーバプログラムを起動することで、メモリなどのシステムリソースを効率的に使うことができる。
デメリットは応答が遅れる点。クライアントからのサービス要求にすぐに応答する必要があるサーバは、スーパーサーバ経由ではなくサーバプログラム自身でサービス要求を監視するべき。これをスタンドアローンという。Webサーバやメールサーバがこれに該当する。
FTPサーバやTelnetサーバなど、接続の頻度が高くないサーバは、スーパーサーバ経由の接続に適している。


xinetdの設定

全体的な設定を行う/etc/xinetd.confファイルと、xinetd.dディレクトリ（通常は/etc/xinetd.d）以下にあるサービスごとの設定ファイルから構成される。


TCP Wrapper

ネットワークサービスのアクセス制御を集中的に行う。
設定ファイルは/etc/hosts.allowおよび/etc/hosts.deny。
/etc/hosts.allowは/etc/hosts.denyよりも先にチェックされる。
/etc/hosts.allowで許可された場合は/etc/hosts.denyがチェックされない。


netstatコマンド、ssコマンド、lsofコマンド

開いているポートを確認する。


ポートスキャン

攻撃者がネットワーク経由で開いているポートを確認する行為。
nmapコマンドでポートスキャンを行う。
fuserコマンドでポートを開いているプロセスを特定する。


chageコマンド

パスワードの有効期限を設定する。


/etc/nologinファイル

rootアカウントでコンソールログインを行うだけのシステムでは、一般ユーザーのログインは不要なので、このファイルを作成しておくとrootアカウントによるログイン以外は禁止される。


suコマンド

一時的に別のユーザーになる。


sudoコマンド

特定の管理者コマンドのみの実行を許可したい場合に利用する。
sudoコマンドを利用すれば、任意の管理者コマンドを任意のユーザーに許可することができる。

sudoコマンドの利用設定をするには、rootユーザーでvisudoコマンドを実行する。
すると、デフォルトのエディタで/etc/sudoersファイルが開かれる。


ulimitコマンド

ユーザーが利用できるリソースを制御できる。


SSH

リモートホスト間の通信において高いセキュリティを実現する。強力な認証機能と暗号化により、ファイル転送やリモート操作を安全に行うことができる。
LinuxではOpenBSDグループによるSSHの実装であるOpenSSHが一般的に利用されている。
SSHにはバージョン1系とバージョン2系があり、公開鍵暗号方式の認証アルゴリズムに違いがある。
バージョン1系ではRSA1が、バージョン2系ではDSAおよびRSAが使われている。

SSHサーバの機能は、sshdデーモンが提供している。sshdの設定ファイルは、/etc/ssh/sshd_config。

SSHをつかってリモートホストにログインするには、sshコマンドを使う。
引数にはホスト名かIPアドレスを指定する。


ホスト認証

SSHでは、ユーザー名とパスワードによるユーザー認証に先立って、クライアントがサーバの正当性を確認するホスト認証が行われる。
SSHで接続するたびにサーバ固有のホスト認証（公開鍵）がサーバからクライアントに送られ、クライアント側で保存されているサーバの公開鍵と比較して、一致するかどうかを確認する。


公開鍵認証

ユーザー認証には、パスワード認証以外に公開鍵認証を利用することができる。
公開鍵認証では、通信を行うホスト感で、一対の公開鍵と秘密鍵のペアを使って認証を行う。
公開鍵認証を行うには、予めクライアント側ユーザーの公開鍵をサーバに登録しておく必要がある。
公開鍵と秘密鍵の鍵ペアを作成するにはssh-keygenコマンドを使う。


scpコマンド

SSHの仕組みを使い、ホスト間で安全にファイルをコピーするコマンド。


ssh-agent

秘密鍵ファイルを使用する際は、パスフレーズを尋ねられる。パスフレーズを入力する手間を省くには、ssh-agentを利用する。
ssh-agentはクライアント側で稼働するデーモンであり、秘密鍵をメモリ上に保持しておき、必要となった時点でそれを利用するため、その都度パスフレーズを入力する必要がない。


SSHポート転送（ポートフォワーディング）

あるポートに送られてきたTCPパケットを、SSHを使った安全な通信路を経由して、リモートホストの任意のポートに転送すること。
この機能を使うと、POP3やFTPなど、暗号化されていないプロトコルを使った通信の安全性を高めることができる。


X11ポート転送

ポート転送の仕組みを使って、リモートホストのXクライアントをローカルホストで動作させること。


GnuPG (G GNU Privacy Guard)

ファイルを暗号化したい場合に利用する。
GnuPGは公開鍵暗号を使って、ファイルを暗号化/復号したり、電子署名をしたりすることのできるオープンソースソフトウェア。
GnuPGを使用するためにはgpgコマンドを使う。


失効証明書

パスフレーズが漏れてしまったり、パスフレーズを忘れてしまったりした際に鍵を無効化させるために使う。

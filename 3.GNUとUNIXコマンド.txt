シェル

ユーザーからのコマンドを受け付け、必要なプログラムを実行する。


シェル変数

その変数を定義したシェルプロセスのみの有効範囲になる。
別のシェルを起動した場合、元のシェルで定義した内容を参照することはできない。


環境変数

その変数を定義したシェル上、及びそのシェルで実行されるプログラムにも引き継がれる。
環境変数はシェル変数をexportコマンドでエクスポートすることによって設定する。


変数の定義方法と参照方法

x $VAR=linux
o VAR=linux
x echo VAR
o echo $VAR


内部コマンドと外部コマンド

内部コマンド　… シェル自体に組み込まれているもの
外部コマンド　… 独立したプログラムとして存在するもの


パイプ（|）

コマンドやプログラムの出力結果を、別のコマンドやプログラムの入力に渡せる。


リダイレクト（>、>>、<、<<、2>）

コマンドの入力元や出力先をコントロールする。
たとえば、
ls -l > filelist
lsコマンドの実行結果をfilelistファイルに保存する。

ファイルを上書きしないで既存のファイルの末尾に追記する場合は（>>）を使う。
ls -l >> filelist
lsコマンドの実行結果をfilelistファイルの末尾に追加する。
　
標準入力を切り替えるには、リダイレクト記号の<を使う。
grep "lpic" < target.txt > result.txt
grepコマンドへの入力をtarget.txtとし、実行結果をresult.txtに書き込んでいる。

特定の文字列が現れるまで入力を続けるには<<を使う。
cat > sample.txt << EOF
EOFが入力されるまでファイルへの入力を続ける。

標準エラー出力をリダイレクトするには、リダイレクト記号の2>を使う。
find / -name "*.tmp" 2> error.log
findコマンドの出力するエラーメッセージをerror.logファイルに保存している。


cat

ファイルの内容を表示するコマンド。


nl

テキストファイルの一部または全部に行番号をつけて表示するコマンド。


od

バイナリファイルの内容を8進数や16進数で表示するコマンド。


head

ファイルの先頭部分を表示するコマンド。
オプションを指定しない場合は、先頭から10行目までを表示する。


tail

ファイルの末尾部分を表示するコマンド。
デフォルトでは最終行から10行表示する。


cut

ファイルの各行から指定したフィールドを取り出すコマンド。
-cオプションで何文字目から取り出すかを指定する。


paste

1つ以上のファイルを読み込んで、行ごとに水平方向に連結するコマンド。


tr

標準入力から読み込まれた文字列を変換したり、削除したりするコマンド。
例） cat /etc/hosts | tr 'a-z' 'A-Z'
文字列の指定にはクラスが使える。
例） cat /etc/hosts | tr [:lower:] [:upper:]
削除の場合（「:」を削除して出力）
例） tr -d : < file1

sort

行単位でファイルの内容をソートするコマンド。
デフォルトでは昇順にソートする。


split

指定されたサイズでファイルを分割するコマンド。
デフォルトでは1000行ごとに複数ファイルに分割する。
分割されたファイルには、ファイル名の末尾に「aa」「bb」「cc」...が付加される。


uniq

入力されたテキストストリームの中で重複している行を調べて、重複している行は1行にまとめて出力するコマンド。
入力するテキストストリームはソートしておく必要があるので、多くの場合sortコマンドとパイプで組み合わせて使う。
sort file1 | uniq



wc

ファイルの行数、単語数、文字数を表示するコマンド。


xargs

標準入力から受け取った文字列を引数に指定して、与えられたコマンドを実行する。
例）60日を超える日数の間更新されていないファイルを削除する。
find . -mtime +60 -type f | xargs rm


ハッシュ値を出力するコマンド

・md5sum
・sha1sum
・sha256sum
・sha512sum


正規表現

abcはそのまま「abc」
任意の1文字は「.」。「a..d」は「abcd」や「a12d」。
一連の文字集合は「[」と「]」。文字クラスと呼ぶ。
「[123]」は1、2、3のどれか一文字。
[0-9]は数字、[a-z]はアルファベットの小文字。
「^」は行頭、「$」は行末。
^aは「行頭にあるa」。a$は「行末にあるa」。
^$は「何もない」。つまり空白行。
直前の文字の0回以上の繰り返しを表すのは「*」。
ab*zは「az」「abz」「abbz」など。
|n|は直前の文字のn回の繰り返し。
[a-z]|5|は英子文字の5回繰り返し。
特殊文字を文字として使いたい場合は「\」を使う。
a\*は「a*」。ただし使えるのは直後の1文字だけ。


grepコマンド

ファイルやテキストストリームの中に、正規表現によって表される検索文字列があるかどうかを調べる。
grep [オプション] 検索パターン [ファイル名]
grep [オプション] [-f ファイル名] [ファイル名]
grep -i ab sample.txt

拡張正規表現を使うには。-Eオプションをつけるか、egrepコマンドを使う。
拡張正規表現:
+ ... 直前の文字の1回以上の繰り返し
? ... 直前の文字の0回もしくは1回の繰り返し
| ... 左右いずれかの記述にマッチする
|n| ... 直前の文字のn回の繰り返し 
|n,m| ... 直前の文字のn回からm回の繰り返し

検索パターンに正規表現を使わない場合はfgrepコマンドを使う。
「.*」という正規表現でない文字列で検索するには以下のようにする。
fgrep '.*' sample.txt
grepコマンドの場合はバックスラッシュでエスケープする。
grep '\.\*' sample.txt


sedコマンド

sed（Stream Editor）はテキストストリームに対して編集を行う。
sedでは、編集する内容をコマンドやスクリプトとしてsedに指示しておき、sedはその指示に基づいてストリームの編集を行い、標準出力に編集結果を書き出す。


dコマンド
次の例ではfile1.txtファイルの1行目から5行目までをdコマンドで削除し、file2.txtファイルに保存する。
sed '1,5d' file1.txt > file2.txt


sコマンド

検索パターンにマッチする部分を置換パターンに置き換えるには、「s/検索パターン/置換パターン」を指定する。
次の例では「linux」という文字を大文字の「LINUX」に変更している。
sed s/linux/LINUX file1.txt

sコマンドでは検索パターンにマッチする部分が1行に複数あっても、最初にマッチした部分だけを置換する。
マッチする部分すべてを置換するには、gスイッチを最後に記述する。
sed s/linux/LINUX/g file1.txt

次の例では/etc/passwdファイルの1行目から5行目までの行頭に>記号を加える。
sed '1,5s/^/>/' /etc/passwd


yコマンド

「y/検索文字/置換文字/」を使うとストリーム中に検索文字にマッチする文字があった場合、その文字を置換文字の同じ位置の文字に置き換える。
sed y/ABC/123/ sample.txt

